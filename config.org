 #+TITLE: Literate Emacs config
#+AUTHOR: Victor Trappler
#+REVEAL_ROOT: https://cdn.jsdelivr.net/npm/reveal.js
# #+REVEAL: split

Basically doom emacs style. Shoutout to systemcrafter.
This follows some simple points:
  + Something nice
  + Something that I *understand* and use easily
  + Support especially for
    + git
    + LaTeX
    + python
  + Org
    + "Vanilla" for note taking
    + org-roam for research purposes

      
  
* Startup options
Some basic options.
#+BEGIN_SRC emacs-lisp
   ;; (setq inhibit-startup-message t) ;; no startup message
  (scroll-bar-mode -1) ; no scroll bar
  (tool-bar-mode -1) ; no tool bar 
  (tooltip-mode -1) ;
  (set-fringe-mode 10)
  (menu-bar-mode -1) ; no menu bar
  (setq visible-bell t) ; visible bell for bad movements
  (org-reload)

;; Personal preference for buffer menu
  (global-set-key (kbd "C-x C-b") 'buffer-menu)
#+END_SRC

#+RESULTS:
: Successfully reloaded Org
: Org mode version 9.4.4 (9.4.4-21-g61336f-elpa @ /home/victor/runemacs/elpa/org-20210215/)

* Package manager configurations
#+BEGIN_SRC emacs-lisp

(require 'package)
(setq package-archives '(("melpa" . "https://melpa.org/packages/")
			 ("melpa-stable" . "https://stable-melpa.org/packages/")
			 ("org" . "https://orgmode.org/elpa/")
			 ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+END_SRC

#+RESULTS:
: t

* Appearance
In order to have a dashboard on startup
** Dashboard
#+begin_src emacs-lisp
(use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook))
#+end_src

** All the icons
Get fancy icons on dired modes
 #+begin_src emacs-lisp
 (use-package all-the-icons)
 (add-hook 'dired-mode-hook 'all-the-icons-dired-mode) ;; all the icons in dired mode
 #+end_src

 #+RESULTS:
 | dired-extra-startup | pdf-occur-dired-minor-mode | doom-modeline-set-project-modeline | all-the-icons-dired-mode |

** Doom themes
Use the doom theme 
 #+begin_src emacs-lisp
    (use-package doom-themes
      :config
      ;; Global settings (defaults)
      (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	    doom-themes-enable-italic t) ; if nil, italics is universally disabled
      (doom-themes-org-config)
      (setq solarized-distinct-fringe-background t)
      (setq solarized-scale-org-headlines t)
      ;; (custom-set-faces
      ;;    '(org-document-title ((t (:height 100))))
      ;;    '(org-level-1 ((t (:height 1.5))))
      ;;    '(org-level-2 ((t (:height 1.4))))
      ;;    '(org-level-3 ((t (:height 1.3))))
      ;;    '(org-level-4 ((t (:height 1.2)))))
      (load-theme 'doom-solarized-light t)
      ;; Enable flashing mode-line on errors
      (doom-themes-visual-bell-config)

      ;; Enable custom neotree theme (all-the-icons must be installed!)
      (doom-themes-neotree-config)
      ;; or for treemacs users
      (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
      (doom-themes-treemacs-config)

      ;; Corrects (and improves) org-mode's native fontification.
      (doom-themes-org-config))

   (use-package org-bullets
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
 #+end_src

 #+RESULTS:
 : t

** Tweak of the appearance
#+begin_src emacs-lisp
  (custom-set-faces
  '(org-document-title ((t (:foreground "#d33682" :weight bold :height 1.5))))
  '(org-level-1 ((t (:inherit outline-1 :extend nil :height 1.2))))
  '(org-level-2 ((t (:inherit outline-2 :extend nil :height 1.1))))
  '(org-level-3 ((t (:inherit outline-3 :extend nil :height 1.0))))
  '(org-level-4 ((t (:inherit outline-4 :extend nil :height 1.0))))
  )
  (plist-put org-format-latex-options :scale 1.3)

#+end_src

#+RESULTS:
| :foreground | default | :background | default | :scale | 1.3 | :html-foreground | Black | :html-background | Transparent | :html-scale | 1.0 | :matchers | (begin $1 $ $$ \( \[) |


** Doom modeline
Setting of the doom modeline
 #+BEGIN_SRC emacs-lisp
 (use-package doom-modeline
   :ensure t
   :init (doom-modeline-mode 1))
 #+END_SRC

 #+RESULTS:
 
* Navigation and ergonomy
** Evil-mode
#+begin_src emacs-lisp
  ;; ;;   ;; To add eventually
  ;; (use-package evil
  ;;   :ensure t
  ;;   :init ;; tweak evil's configuration before loading it
  ;;   (setq evil-search-module 'evil-search)
  ;;   (setq evil-ex-complete-emacs-commands nil)
  ;;   (setq evil-vsplit-window-right t)
  ;;   (setq evil-split-window-below t)
  ;;   (setq evil-shift-round nil)
  ;;   (setq evil-want-C-u-scroll t)
  ;;   :config ;; tweak evil after loading it
  ;;   (evil-mode)
  ;;   ;; example how to map a command in normal mode (called 'normal state' in evil)
  ;;   (define-key evil-normal-state-map (kbd ", w") 'evil-window-vsplit)
  ;;   ) 
#+end_src
** Which key
 #+begin_src emacs-lisp
   (use-package which-key
     :init (which-key-mode)
     :diminish which-key-mode
     :config (setq which-key-idle-delay 1)
     )
 #+end_src

 #+RESULTS:
 : t

** Ivy configurations
*** Ivy basic
  #+BEGIN_SRC emacs-lisp

    (use-package counsel			
      :init (counsel-mode))
    (use-package ivy
     :diminish
     :bind (("C-s" . swiper)
	    :map ivy-minibuffer-map
	    ("TAB" . ivy-alt-done)
	    ("C-l" . ivy-alt-done)
	    ("C-j" . ivy-next-line)
	    ("C-k" . ivy-previous-line)
	    :map ivy-switch-buffer-map
	    ("C-k" . ivy-previous-line)
	    ("C-l" . ivy-done)
	    ("C-d" . ivy-switch-buffer-kill)
	    :map ivy-reverse-i-search-map
	    ("C-k" . ivy-previous-line)
	    ("C-d" . ivy-reverse-i-search-kill))
     :config
     (ivy-mode 1))
  #+END_SRC

  #+RESULTS:
  : ivy-reverse-i-search-kill

*** ivy rich
  #+begin_src emacs-lisp
    (use-package ivy-rich
      :init (ivy-rich-mode 1))
  #+end_src

  #+RESULTS:

*** Other

* Project organisation and Version Control
** Magit
Magit is built-in usually, just use M-x magit-status, or C-x g
#+begin_src emacs-lisp
  ;; (use-package magit
  ;; :ensure t
  ;; )
#+end_src
** Projectile
 #+begin_src emacs-lisp
 (use-package projectile
   :ensure t
   :init
   (projectile-mode +1)
   :bind (:map projectile-mode-map
               ("s-p" . projectile-command-map)
               ("C-c p" . projectile-command-map)))
 #+end_src

 #+RESULTS:
 : projectile-command-map
 
* Programming support
** All-around tools
*** Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init (yas-global-mode 1))
    (add-to-list 'load-path
              "~/.emacs.default/plugins/yasnippet")
#+END_SRC

*** Autoinsert
#+begin_src emacs-lisp
(require 'autoinsert)
  (defun my/autoinsert-yas-expand ()
    "Replace text in yasnippet template."
    (yas-expand-snippet (buffer-string) (point-min) (point-max)))


  (add-to-list 'auto-insert-alist '(("\\.py\\'" . "Python souce code header") .
				    ["template.py" my/autoinsert-yas-expand]))
#+end_src

*** Babel
In order to be able to syntax and execute code from org files
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (emacs-lisp . t)
     (R . t)
     (fortran . t)
     (gnuplot . t)
     (python . t)
     (octave . t)
     (processing . t)
     (latex . t)
     )
   )
  (setq python-indent-offset 4)
(setq org-src-preserve-indentation t)
  ;; Do not ask for confirmation for python and elisp code
  (defun my-org-confirm-babel-evaluate (lang body)
    (not (member lang '("python" "elisp"))))

  (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
    (defun my-org-latex-yas ()
      "Activate org and LaTeX yas expansion in org-mode buffers."
      (yas-minor-mode)
      (yas-activate-extra-mode 'latex-mode))

  (add-hook 'org-mode-hook #'my-org-latex-yas)
#+end_src

#+RESULTS:
| org-xournalpp-mode | org-ref-org-menu | #[0 \301\211\207 [imenu-create-index-function org-imenu-get-tree] 2] | prettify-symbols-mode | visual-line-mode | my-org-latex-yas | (lambda nil (org-bullets-mode 1)) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes | org-ref-setup-label-finders |



** Programming language
*** Python
**** IDE features
Elpy package for all basic IDE features
 #+BEGIN_SRC emacs-lisp
   (use-package elpy
     :ensure t
     :init
     (elpy-enable)
     )
   (setq elpy-rpc-python-command "python3")
   (add-to-list 'process-coding-system-alist '("python3" . (utf-8 . utf-8)))
   (add-to-list 'process-coding-system-alist '("python" . (utf-8 . utf-8)))
   (setq elpy-rpc-virtualenv-path 'global)
   ;; No warning message about indent guessing
   (setq python-indent-guess-indent-offset t)  
   (setq python-indent-guess-indent-offset-verbose nil)
 #+END_SRC

 #+RESULTS:
 : ((python3 utf-8 . utf-8) (python utf-8 . utf-8))

 
 Blacken mode for autoformatting
#+begin_src emacs-lisp
  (add-hook 'python-mode-hook 'blacken-mode)
#+end_src
****  Virtual environment
#+begin_src emacs-lisp
  (use-package pyvenv
    :ensure t
    :config
    (pyvenv-mode 1)

  (setq pyvenv-post-activate-hooks
	(list (lambda ()
		(setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python3")))))
  (setq pyvenv-post-deactivate-hooks
	(list (lambda ()
		(setq python-shell-interpreter "python3.8"))))
  )

#+end_src

 #+RESULTS:
 
* Editing tools
*** Org-mode params
I prefer the captions to be after the tables
#+begin_src emacs-lisp
  (setq org-latex-caption-above nil) ;; Put caption at end of table
  (setq org-startup-with-inline-images t)
  (setq org-hide-emphasis-markers t) ;; remove *..*, /../
  (font-lock-add-keywords 'org-mode ;; visual bullets instead of * + - etc
			  '(("^ +\\([-*]\\) "
			     (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  (setq solarized-scale-org-headlines nil)
  (setq org-highlight-latex-and-related '(latex)) ;; to make tex stand out in org mode
  (setq org-startup-latex-with-latex-preview t)
  (add-hook 'org-mode-hook 'visual-line-mode)
  (setq prettify-symbols-alist
	(map-merge 'list prettify-symbols-alist
		   `(
		     ("#+name:" . "✎")
		     ("#+NAME:" . "✎")
		     ("#+BEGIN_SRC" . "➤")
		     ("#+BEGIN_EXAMPLE" . "➤")
		     ("#+END_SRC" . "⏹")
		     ("#+END_EXAMPLE" . "⏹")
		     ("#+RESULTS:" . "🠋")
		     )))
    (prettify-symbols-mode 0)
    (add-hook 'org-mode-hook 'prettify-symbols-mode)

#+end_src

*** AucTeX/RefTeX
We just add the hook to have reftex
#+begin_src emacs-lisp
(add-hook 'LaTeX-mode-hook 'reftex-mode)
#+end_src

#+RESULTS:
| reftex-mode | preview-mode-setup |

*** Pdf-tools
#+BEGIN_SRC emacs-lisp
(pdf-tools-install)
(require 'ox)
#+END_SRC

#+RESULTS:
: ox

*** revealjs
For nice slides
#+begin_src emacs-lisp
(require 'ox-reveal)
(setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js")
#+end_src

#+RESULTS:
: https://cdn.jsdelivr.net/npm/reveal.js

* Research workflow
** Bibliography and notes management
#+begin_src emacs-lisp
  (setq
     org_notes "~/org-roam/Notes"
     zot_bib "~/academic_writing/bibzotero.bib"
     org-directory org_notes
     deft-directory org_notes
     org-roam-directory org_notes
     org-default-notes-file (concat org_notes "/inbox.org")
     )

  (setq bibtex-completion-bibliography'("~/academic_writing/bibzotero.bib"))
  (setq bibtex-completion-pdf-field "File")
  (setq bibtex-completion-library-path '("~/Zotero/storage/"))
#+end_src

#+RESULTS:
| ~/Zotero/storage/ |


#+RESULTS:

** Org-noter
#+begin_src emacs-lisp
(use-package org-noter
  :after (:any org pdf-view)
  :config
  (setq
   ;; The WM can handle splits
   org-noter-notes-window-location 'horizontal-split ;;'other-frame
   ;; Please stop opening frames
   org-noter-always-create-frame nil
   ;; I want to see the whole file
   org-noter-hide-other nil
   ;; Everything is relative to the main notes file
   org-noter-notes-search-path (list org_notes)
   )
  )

#+end_src

   

#+begin_src emacs-lisp
    (setq bibtex-completion-pdf-symbol "")
    (setq bibtex-completion-notes-symbol "✎")
    (setq bibtex-completion-display-formats
	  '((article       . "${=has-pdf=:1}${=has-note=:1} ${=type=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
	    (inbook        . "${=has-pdf=:1}${=has-note=:1} ${=type=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
	    (incollection  . "${=has-pdf=:1}${=has-note=:1} ${=type=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	    (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${=type=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
	    (t             . "${=has-pdf=:1}${=has-note=:1} ${=type=:1} ${year:4} ${author:36} ${title:*}")))
    (setq bibtex-completion-notes-template-multiple-files
	  (concat 
       "#+TITLE: ${title}\n"
       "#+ROAM_KEY: cite:${=key=}\n"
       "* TODO Notes\n"
       ":PROPERTIES:\n"
       ":Custom_ID: ${=key=}\n"
       ":NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
       ":AUTHOR: ${author-abbrev}\n"
       ":JOURNAL: ${journaltitle}\n"
       ":DATE: ${date}\n"
       ":YEAR: ${year}\n"
       ":DOI: ${doi}\n"
       ":URL: ${url}\n"
       ":END:\n\n"
       )
      )

#+end_src

#+RESULTS:
: ((article . ${=has-pdf=:1}${=has-note=:1} ${=type=:3} ${year:4} ${author:36} ${title:*} ${journal:40}) (inbook . ${=has-pdf=:1}${=has-note=:1} ${=type=:3} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}) (incollection . ${=has-pdf=:1}${=has-note=:1} ${=type=:3} ${year:4} ${author:36} ${title:*} ${booktitle:40}) (inproceedings . ${=has-pdf=:1}${=has-note=:1} ${=type=:3} ${year:4} ${author:36} ${title:*} ${booktitle:40}) (t . ${=has-pdf=:1}${=has-note=:1} ${=type=:3} ${year:4} ${author:36} ${title:*}))

** Org-roam
This is copy pasted from the git of org-roam (and https://lucidmanager.org/productivity/taking-notes-with-emacs-org-mode-and-org-roam/)
#+begin_src emacs-lisp
(use-package org-roam
  :ensure
  :after org
  :init (setq org-roam-v2-ack t)
  :hook
  (after-init . org-roam-db-autosync-mode)

  :custom
  (org-roam-directory "~/org-roam/")
  :config
  (org-roam-setup)
  (require 'org-roam-dailies)
  :bind (("C-c n f" . org-roam-node-find)
	 ("C-c n g" . org-roam-graph)
	 ("C-M-i"    . completion-at-point)
	 :map org-mode-map
	 ("C-c n i" . org-roam-node-insert)
	 ("C-c n o" . org-id-get-create)
	 ("C-c n r" . org-roam-ref-add)
	 ("C-c n t" . org-roam-tag-add)
	 ("C-c n c" . helm-bibtex)
	 ("C-c n a" . org-roam-alias-add)
	 ("C-c n l" . org-roam-buffer-toggle)
	 :map org-roam-dailies-map
	 ("Y" . org-roam-dailies-capture-yesterday)
	 ("T" . org-roam-dailies-capture-tomorrow))
  :bind-keymap
  ("C-c n d" . org-roam-dailies-map)
)
  (setq org-roam-completion-everywhere t)
  (setq org-roam-dailies-directory "/home/victor/org-roam/daily/")


  (add-to-list 'load-path "~/runemacs/private/org-roam-ui")
  (load-library "org-roam-ui")
    (use-package org-roam-ui
      :after org-roam
  ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
  ;;         a hookable mode anymore, you're advised to pick something yourself
  ;;         if you don't care about startup time, use
   :hook (after-init . org-roam-ui-mode)
      :config
      (setq org-roam-ui-sync-theme t
	    org-roam-ui-follow t
	    org-roam-ui-update-on-save t
	    org-roam-ui-open-on-start t))
#+end_src

#+RESULTS:
| org-roam-ui-mode | org-roam-db-autosync-mode | #[0 \300 \207 [dashboard-insert-startupify-lists] 1] | x-wm-set-size-hint | tramp-register-archive-file-name-handler | magit-maybe-define-global-key-bindings | table--make-cell-map |

** Org-ref
à revoir
   https://rgoswami.me/posts/org-note-workflow/

#+begin_src emacs-lisp
  (use-package org-ref
    :config
    (setq
     org-ref-completion-library 'org-ref-ivy-cite
     org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
     org-ref-default-bibliography (list zot_bib)
     org-ref-bibliography-notes (concat org_notes "/bibnotes.org")
     org-ref-note-title-format "* TODO %y - %t\n :PROPERTIES:\n  :Custom_ID: %k\n  :NOTER_DOCUMENT: %F\n :ROAM_KEY: cite:%k\n  :AUTHOR: %9a\n  :JOURNAL: %j\n  :YEAR: %y\n  :VOLUME: %v\n  :PAGES: %p\n  :DOI: %D\n  :URL: %U\n :END:\n\n"
     org-ref-notes-directory org_notes
     org-ref-notes-function 'orb-edit-notes
     ))
  (setq org-latex-prefer-user-labels t)
#+end_src
** Org-ref-bibtex

#+begin_src emacs-lisp
  (use-package org-roam-bibtex
    :after (org-roam)
    :hook (org-roam-mode . org-roam-bibtex-mode)
    :config
    (setq org-roam-bibtex-preformat-keywords
     '("=key=" "title" "url" "file" "author-or-editor" "keywords"))
    (setq orb-templates
	  '(("r" "ref" plain (function org-roam-capture--get-point)
	     ""
	     :file-name "${slug}"
	     :head "#+TITLE: ${=key=}: ${title}\n#+ROAM_KEY: ${ref}

  - tags ::
  - keywords :: ${keywords}

  \n* ${title}\n  :PROPERTIES:\n  :Custom_ID: ${=key=}\n  :URL: ${url}\n  :AUTHOR: ${author-or-editor}\n  :NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n  :NOTER_PAGE: \n  :END:\n\n"

	     :unnarrowed t))))
 #+end_src


# #+BEGIN_SRC emacs-lisp
# (setq org-ref-completion-library 'org-ref-ivy-cite)
# (require 'org-ref-ivy-cite)
#   ;; (setq org-ref-default-bibliography '("~/acadwriting/bibzotero.bib"))
# (require 'org-ref)
# #+END_SRC

** Academic phrases
Small emacs package which helps in finding some inspiration for writing things.
#+begin_src emacs-lisp
(require 'academic-phrases)
#+end_src

** Xournalpp integration in org mode
Integration of xournal++ within org documents
#+begin_src emacs-lisp
  (use-package org-xournalpp
    :load-path "~/org-xournalpp"
    :config
    (add-hook 'org-mode-hook 'org-xournalpp-mode))
#+end_src

#+RESULTS:
: t

* Blogging with emacs
Export settings from org to html
  #+begin_src emacs-lisp
    (setq org-publish-project-alist ;; https://thackl.github.io/blogging-with-emacs-org-mode-and-jekyll
	  '(("vtrappler.github.io" ;; my blog )
	     ;; Path to org files.
	     :base-directory "~/vtrappler.github.io/org_posts/"
	     :base-extension "org"
	     ;; Path to Jekyll Posts
	     :publishing-directory "~/vtrappler.github.io/_posts/"
	     :recursive t
	     :publishing-function org-html-publish-to-html
	     ;; :publishing-function org-pandoc-export-to-markdown
	     :headline-levels 4
	     :html-extension "html"
	     :body-only t
	     )))
  #+end_src

  #+RESULTS:
  | vtrappler.github.io | :base-directory | ~/vtrappler.github.io/org_posts/ | :base-extension | org | :publishing-directory | ~/vtrappler.github.io/_posts/ | :recursive | t | :publishing-function | org-html-publish-to-html | :headline-levels | 4 | :html-extension | html | :body-only | t |


  #+begin_src emacs-lisp

    (defun create-blogpost (x)
	"Create a new blogpost."
	(interactive "sPost title: ")
	(let ((date (shell-command-to-string "echo -n $(date +%Y-%m-%d)"))
	      (title (s-replace " " "-" x))
	      filename filepath)
	  (setf filename (concat date "-" title ".org"))
	  (setf filepath (concat "~/vtrappler.github.io/org_posts/" filename))
	  (write-region "" 0 filepath t)
	  (find-file filepath))
	  (setq year (shell-command-to-string "echo -n $(date +%Y)"))
	  (setq month (shell-command-to-string "echo -n $(date +%m)"))
	  (setq day (shell-command-to-string "echo -n $(date +%d)"))
	  (insert "jekyll-autofilled-frontmatter")
	  (yas-expand)
	  )

  #+end_src

  #+RESULTS:
  : create-blogpost



  
